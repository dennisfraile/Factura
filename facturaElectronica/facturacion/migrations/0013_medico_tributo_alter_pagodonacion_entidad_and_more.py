# Generated by Django 5.0.1 on 2024-08-19 19:28

import django.core.validators
import django.db.models.deletion
import facturacion.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('facturacion', '0012_remove_cuerpodocumento_montodescu_and_more'),
        ('usuarios', '0008_alter_actividadeconomica_codigo_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Medico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre del medico que presta el servicio')),
                ('nit', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_nit', message='El nit debe tener exactamente 14 o 9 dígitos.', regex='^([0-9]{14}|[0-9]{9})$')], verbose_name='NIT del medico que presta el servicio')),
                ('docIdentificacion', models.CharField(blank=True, max_length=25, null=True, verbose_name='Documento de identificacion de medico no domiciliados')),
                ('tipoServicio', models.CharField(choices=[('1', 'Cirujia'), ('2', 'Operacion'), ('3', 'Tratamiento medico'), ('4', 'Cirujia instituto salvadoreño de Binestar Magisterial'), ('5', 'Operacion Instituto Salvadoreño de Binestar Magisterial'), ('6', 'Tratamiento medico Instituto Salvadoreño de Binestar Magisterial')], max_length=6, verbose_name='Codigo del Sevicio Realizado')),
            ],
            options={
                'verbose_name_plural': 'Medicos',
            },
        ),
        migrations.CreateModel(
            name='Tributo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=2, verbose_name='Codigo')),
                ('valor', models.CharField(max_length=150, verbose_name='Valores')),
            ],
            options={
                'verbose_name_plural': 'Tributos del resumen',
            },
        ),
        migrations.AlterField(
            model_name='pagodonacion',
            name='entidad',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='pagos_donacion', to='usuarios.entidad'),
        ),
        migrations.AlterField(
            model_name='responsehacienda',
            name='comprobanteDonacion',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comprobanteDonacionResponse', to='facturacion.pagodonacion'),
        ),
        migrations.AlterField(
            model_name='responsehacienda',
            name='sujetoExcluido',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sujetoExcluidoResponse', to='facturacion.sujetoexcluido'),
        ),
        migrations.CreateModel(
            name='FacturaElectronica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('es_factura_electronica', models.BooleanField(default=True, verbose_name='¿Es Factura Electrónica?')),
                ('totalNoSuj', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Total de Operaciones no sujetas')),
                ('totalExenta', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Total de Operaciones exentas')),
                ('totalGravada', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Total de Operaciones Gravadas')),
                ('subTotalVentas', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Suma de operaciones sin impuestos')),
                ('descuNoSuj', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Monto global de Descuento, Bonificación, Rebajas y otros a ventas no sujetas')),
                ('descuExenta', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Monto global de Descuento, Bonificación, Rebajas y otros a ventas exentas')),
                ('descuGravada', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Monto global de Descuento, Bonificación, Rebajas y otros a ventas gravadas')),
                ('porcentajeDescuento', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Porcentaje del monto global de Descuento, Bonificación, Rebajas y otros')),
                ('totalDescu', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Total del monto de Descuento, Bonificación, Rebajas')),
                ('subTotal', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Sub-Total')),
                ('ivaRete1', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='IVA Retenido')),
                ('reteRenta', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Retención Renta')),
                ('montoTotalOperacion', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Monto Total de la Operación')),
                ('totalNoGravado', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(-99999999999.99), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Total Cargos/Abonos que no afectan la base imponible')),
                ('totalPagar', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Total a Pagar')),
                ('totalLetras', models.CharField(max_length=200, verbose_name='Valor en Letras')),
                ('totalIva', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='IVA 13%')),
                ('saldoFavor', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Saldo a Favor')),
                ('condicionOperacion', models.CharField(choices=[('1', 'Contado'), ('2', 'A credito'), ('3', 'Otro')], max_length=25, verbose_name='Condicion de la Operacion')),
                ('numPagoElectronico', models.CharField(blank=True, max_length=100, null=True, verbose_name='Número de pago Electrónico')),
                ('fecha', models.DateField(auto_now=True, verbose_name='Fecha')),
                ('fechaTransmicion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Transmicion')),
                ('emisor', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='usuarios.entidad')),
                ('entidad', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='factura', to='usuarios.entidad')),
                ('receptor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facturacion.receptor')),
            ],
            options={
                'verbose_name_plural': 'Facturas Electronicas',
            },
        ),
        migrations.CreateModel(
            name='Extencion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombEntrega', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nombre del responsable que Genera el DTE')),
                ('docuEntrega', models.CharField(blank=True, max_length=25, null=True, verbose_name='Documento de identificación de quien genera el DTE')),
                ('nombRecibe', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nombre del responsable de la operación por parte del receptor')),
                ('docuRecibe', models.CharField(blank=True, max_length=25, null=True, verbose_name='Documento de identificación del responsable de la operación por parte del receptor')),
                ('observaciones', models.TextField(blank=True, max_length=3000, null=True, verbose_name='Observaciones')),
                ('placaVehiculo', models.CharField(blank=True, max_length=10, null=True, verbose_name='Placa de vehículo')),
                ('entidad', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='extencion', to='usuarios.entidad')),
                ('facturaElectronica', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='facturaElectronica', to='facturacion.facturaelectronica')),
            ],
            options={
                'verbose_name_plural': 'Extenciones',
            },
        ),
        migrations.CreateModel(
            name='DocumentoRelacionado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipoDocumento', models.CharField(choices=[('04', 'Nota de remision'), ('08', 'Comprobante de liquidacion'), ('09', 'Documento contable de liquidacion')], max_length=20, verbose_name='Tipo de Documento')),
                ('tipoGeneracion', models.CharField(choices=[('1', 'Fisico'), ('2', 'Electronico')], max_length=20, verbose_name='Tipo de Generacion')),
                ('numeroDocumento', models.CharField(max_length=36, verbose_name='Numero de Documento Relacionados')),
                ('fechaEmision', models.DateField(verbose_name='Fecha de Generacion del documento Relacionados')),
                ('entidad', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='documentos_relacionados', to='usuarios.entidad')),
                ('facturaElectronica', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='documentoRelacionado', to='facturacion.facturaelectronica')),
            ],
            options={
                'verbose_name_plural': 'Documentos Relacionados',
            },
        ),
        migrations.CreateModel(
            name='Documento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numItem', models.IntegerField(help_text='N° ítem, debe estar entre 1 y 2000', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2000)], verbose_name='N° item')),
                ('tipoItem', models.CharField(choices=[('1', 'Bienes'), ('2', 'Servicios'), ('3', 'Ambos(Bienes y Servicios)'), ('4', 'Otros Tributos por Item')], max_length=6, verbose_name='Tipo de Item')),
                ('numeroDocumento', models.CharField(blank=True, max_length=36, null=True, verbose_name='Numero de Documento Relacionado')),
                ('cantidad', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(1e-08), django.core.validators.MaxValueValidator(100000000000.0)])),
                ('codigo', models.CharField(blank=True, max_length=25, null=True, verbose_name='Codigo')),
                ('codTributo', models.CharField(blank=True, choices=[(None, 'Ninguno'), ('A8', 'Impuesto Especial al Combustible (0%, 0.5%, 1%)'), ('57', 'Impuesto Industria de Cemento'), ('90', 'Impuesto Especial a la Primera Matricula'), ('D4', 'Otros Impuestos Casos Especiales'), ('D5', 'Otras Tasas Casos Especiales'), ('A6', 'Impuesto AD-Valorem, Armas de Fuego, Municiones Explosivas y Articulos Similares')], max_length=2, null=True, verbose_name='Tributo sujeto a cálculo de IVA')),
                ('descripccion', models.CharField(max_length=1000, verbose_name='Descripccion')),
                ('precioUni', models.DecimalField(decimal_places=8, help_text='Precio Unitario debe ser mayor o igual a 0, menor que 100000000000 y múltiplo de 0.00000001', max_digits=22, validators=[django.core.validators.MinValueValidator(0), facturacion.models.validate_exclusive_max, facturacion.models.validate_multiple_of], verbose_name='Precio Unitario')),
                ('montoDescu', models.DecimalField(decimal_places=8, help_text='Descuento, Bonificación, Rebajas por ítem. Debe ser mayor o igual a 0, menor que 100000000000 y múltiplo de 0.00000001', max_digits=22, validators=[django.core.validators.MinValueValidator(0), facturacion.models.validate_exclusive_max, facturacion.models.validate_multiple_of], verbose_name='Descuento, Bonificacion, Rebajas por Item')),
                ('ventaNoSuj', models.DecimalField(decimal_places=8, help_text='Ventas no Sujetas. Debe ser mayor o igual a 0, menor que 100000000000 y múltiplo de 0.00000001', max_digits=22, validators=[django.core.validators.MinValueValidator(0), facturacion.models.validate_exclusive_max, facturacion.models.validate_multiple_of], verbose_name='Ventas no Sujetas')),
                ('ventaExenta', models.DecimalField(decimal_places=8, help_text='Ventas Exentas. Debe ser mayor o igual a 0, menor que 100000000000 y múltiplo de 0.00000001', max_digits=22, validators=[django.core.validators.MinValueValidator(0), facturacion.models.validate_exclusive_max, facturacion.models.validate_multiple_of], verbose_name='Ventas Exentas')),
                ('ventaGrabada', models.DecimalField(decimal_places=8, help_text='Ventas Gravadas. Debe ser mayor o igual a 0, menor que 100000000000 y múltiplo de 0.00000001', max_digits=22, validators=[django.core.validators.MinValueValidator(0), facturacion.models.validate_exclusive_max, facturacion.models.validate_multiple_of], verbose_name='Ventas Gravadas')),
                ('tributos', models.CharField(blank=True, max_length=2, null=True, verbose_name='Codigo del Tributo')),
                ('psv', models.DecimalField(decimal_places=8, help_text='Precio Sujerido de Venta. Debe ser mayor o igual a 0, menor que 100000000000 y múltiplo de 0.00000001', max_digits=22, validators=[django.core.validators.MinValueValidator(0), facturacion.models.validate_exclusive_max, facturacion.models.validate_multiple_of], verbose_name='Precio Sujerido de Venta')),
                ('noGravado', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(-100000000000.0), django.core.validators.MaxValueValidator(100000000000.0)], verbose_name='Cargos/Abonos que no afectan la base imponible')),
                ('ivaItem', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(0), facturacion.models.validate_exclusive_max, facturacion.models.validate_multiple_of], verbose_name='IVA por Item')),
                ('entidad', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='documentoss', to='usuarios.entidad')),
                ('uniMedida', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facturacion.unidadmedida')),
                ('facturaElectronica', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='document', to='facturacion.facturaelectronica')),
            ],
            options={
                'verbose_name_plural': 'Documentos',
            },
        ),
        migrations.AddField(
            model_name='apendice',
            name='facturaElectronica',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='apendiceFacturaElectronica', to='facturacion.facturaelectronica'),
        ),
        migrations.AddField(
            model_name='identificador',
            name='facturaElectronica',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='facturacion.facturaelectronica'),
        ),
        migrations.AddField(
            model_name='responsehacienda',
            name='facturaElectronica',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='facturaElectronicaResponse', to='facturacion.facturaelectronica'),
        ),
        migrations.CreateModel(
            name='OtroDocumento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codDocAsociado', models.IntegerField(max_length=4, verbose_name='Documento Asociado')),
                ('descDocumento', models.CharField(blank=True, max_length=100, null=True, verbose_name='Identificacion del documento asociado')),
                ('detalleDocumento', models.CharField(blank=True, max_length=300, null=True, verbose_name='Detalle de documento asociado')),
                ('entidad', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='otros_documentos', to='usuarios.entidad')),
                ('facturaElectronica', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='otroDocumento', to='facturacion.facturaelectronica')),
                ('medico', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='facturacion.medico')),
            ],
            options={
                'verbose_name_plural': 'Otros Documentos',
            },
        ),
        migrations.CreateModel(
            name='PagoFactura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=2, validators=[django.core.validators.RegexValidator(message='El código debe seguir el patrón: 01-09, 10-14, o 99.', regex='^(0[1-9]|1[0-4]|99)$')])),
                ('montoPago', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)])),
                ('referencia', models.CharField(blank=True, max_length=50, null=True, verbose_name='Referencia de modalidad de pago')),
                ('plazo', models.CharField(blank=True, max_length=2, null=True, validators=[django.core.validators.RegexValidator(message='El plazo debe seguir el patrón: 01-03.', regex='^0[1-3]$')], verbose_name='Plazo')),
                ('periodo', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Período de plazo')),
                ('entidad', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='pagos', to='usuarios.entidad')),
            ],
            options={
                'verbose_name_plural': 'Pagos de Facturas',
            },
        ),
        migrations.AddField(
            model_name='facturaelectronica',
            name='pago',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='facturacion.pagofactura'),
        ),
        migrations.AddField(
            model_name='facturaelectronica',
            name='tributo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='facturacion.tributo', verbose_name='facturas'),
        ),
        migrations.CreateModel(
            name='TributoResumen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999999999.99)], verbose_name='Valor del Tributo')),
                ('entidad', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='tributos_resumen', to='usuarios.entidad')),
                ('tributo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tributos', to='facturacion.tributo')),
            ],
            options={
                'verbose_name_plural': 'Tributos del resumen de Facturas Electronicas',
            },
        ),
        migrations.CreateModel(
            name='VentaTercero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nit', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_nit', message='El nit debe tener exactamente 14 o 9 dígitos.', regex='^([0-9]{14}|[0-9]{9})$')], verbose_name='Numero de NIT sin guiones')),
                ('nombre', models.CharField(max_length=250, verbose_name='Nombre, denominacion o razon social del Tercero')),
                ('facturaElectronica', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ventaTercero', to='facturacion.facturaelectronica')),
            ],
            options={
                'verbose_name_plural': 'Ventas a Terceros',
            },
        ),
    ]
